# -*- coding: utf-8 -*-
"""Random forest class.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hYiJjE54eOh4GXmDV3CBoqO7pe1Zr2rk
"""

import logging
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer 
import numpy as np
import matplotlib.pyplot as plt
from sklearn.pipeline import Pipeline
logging.basicConfig(filename="Randomforest.log", 
                    format='%(asctime)s %(message)s', 
                    filemode='w') 
logger=logging.getLogger() 
  
logger.setLevel(logging.DEBUG)

class random_forest:
  def __init__(self):
    self.train()

  def train(self):
    try:
      support=open("support.txt","r").readlines()
      bully=open("bully.txt","r").readlines()
    except:
      logger.warning("error may be encountered while reading file")


    label=[]
    comm=[]
    for i in bully:
      label.append('bullying')
      comm.append(i[:-1].lower())

    for i in support:
      label.append('support')
      comm.append(i[:-1].lower())
    df = pd.DataFrame({'sentence':comm, 'label':label})    
    logger.info("Loading the features")
    try:
      f=open("features.txt","r").readlines()
    except:
      logger.warning("error may be encountered while reading features file")
    features=[]
    for i in f:
      features.append(i[:-1].lower())    

    ##TfidfVectorizer
    tfidfconverter = TfidfVectorizer(max_features=2000,vocabulary=features,ngram_range=(1, 3))  
    X = tfidfconverter.fit_transform(comm).toarray()
    logger.info("vectorized using tfidf")

    idf=tfidfconverter.idf_
    rr=dict(zip(tfidfconverter.get_feature_names(), idf))
    pd.DataFrame(rr.items())

    feature_names = np.array(tfidfconverter.get_feature_names())
    sorted_by_idf = np.argsort(tfidfconverter.idf_)
    print("Features with lowest idf:\n{}".format(
          feature_names[sorted_by_idf[:3]]))


    from sklearn.model_selection import train_test_split  
    X_train, X_test, y_train, y_test = train_test_split(X, label, test_size=0.2, random_state=0,stratify=label)
    logger.info("Spliting into test and traning ")

    from sklearn.ensemble import RandomForestClassifier
    text_classifier = RandomForestClassifier(n_estimators=100, random_state=0)  
    text_classifier.fit(X_train, y_train)
    logger.info("training the classifier")

    predictions = text_classifier.predict(X_test)
    from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

    print(confusion_matrix(y_test,predictions))  
    print(classification_report(y_test,predictions))  
    print(accuracy_score(y_test, predictions))
    logger.info("showing the accuracy")

    input=['poli annu mwone','nee ninte vettil poyy para thayoli']
    o=tfidfconverter.fit_transform(input).toarray()
    predict=text_classifier.predict(o)
    print(input,predict)

random_forest()

